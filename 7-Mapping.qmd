---
title: "Worksheet 7: Mapping"
author: "Indira Lessington"
date: "Apr. 21st, 2025"
---

_This is the seventh in a series of worksheets for History 8500 at Clemson University. The goal of these worksheets is simple: practice, practice, practice. The worksheet introduces concepts and techniques and includes prompts for you to practice in this interactive document. When you are finished, you should change the author name (above), render your document to a pdf, and upload it to canvas. Don't forget to commit your changes as you go and push to github when you finish the worksheet._

## Mapping with `ggmap()` and `ggplot2()`

There are many different mapping packages for R. That means there is no single way to create a map in R. Different packages have different strengths and weaknesses and your use of them will depend on your goals and the historical questions you would like to ask. If your project is highly map centric - it may be better suited to ArcGIS which we will not cover in this class. 

```{r message=FALSE, warning=FALSE}
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
library(ggmap)
library(tidygeocoder)
```

### Geocoding
The first step in any project is to create geographical data. Depending on the time period you study and the nature of the data, this may or may not be able to be automated. The process of associating geographical coordinates (latitude/longitude) with data is called **geocoding**. There are numerous avenues and services for performing this service. Google Maps and Open Street Maps are the two most common. These services accept an address and return latitude and longitude coordinates. Google Maps does require an API Key which you can sign up for. Typically geocoding with Google costs .5 cents per entry but when you sign up with them, you get $300 in credit per year (at least at the time of writing this - that may change). Although we geocode a very large amount of data with Google on Mapping the Gay Guides, I've never been charged for geocoding. 

However, for the purposes of this class we're going to use Open Street Map's geocoding API because it is open source and therefore free. 

To use the geocoding service, lets first load some data. We'll use the recreation data that we used last week. 
```{r}
rec.data <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/Recreation-Expenditures.csv")
head(rec.data)
```
Notice in this dataset we have the city state and year but no geographical coordinates if we wanted to map this data. Even if we don't have an exact street address, we can still geocode this data to get coordinates. The function to do that is `geocode()` and we can pass it a city and street. Note the method option, which designates which geocoding service we want to use. 
```{r}
rec.data.coordinates <- rec.data %>% geocode(city = city, state = state, method='osm', lat = latitude, long = longitude)
head(rec.data.coordinates)
```
Now we have latitude and longitude coordinates for our data. 

(@) Use this approach to geocode the `UndergroundRR` data. 
```{r}
undergroundRR.coordinates <- undergroundRR %>% geocode(city = City, state = State, method='osm', lat = latitude, long = longitude)
head(undergroundRR.coordinates)
```


(@) Geocode the Boston Women Voters dataset. Note that the data does include street addresses but because they are broken into parts - street address number, street, etc - you'll need to combine them into a full address to pass to the geocoding function. 
```{r}
data("BostonWomenVoters")
BostonWomenVoters <- BostonWomenVoters %>%
  mutate(combined_address = paste(Street.Number.on.April.1, 
                                  Street.of.Residence.on.April.1, 
                                  Ward, 
                                  State.or.Province.of.Birth, sep = ", "))
BostonWomenVoters.coordinates <- BostonWomenVoters %>%
  slice(1:20) %>%
  geocode(address = combined_address, method = 'osm', lat = latitude, long = longitude)รง
head(BostonWomenVoters.coordinates)
```

### Maps with `ggplot()`

Just like charts in ggplot, maps in ggplot are plotted using a variety of layers. To build a map we need to supply it with geographic data that can use to plot a base map. Your base map will differ depending on the scale of your data, the questions you are asking, and your area of study. For the purposes of this worksheet lets map the gay guides data. Typically you'd need to geocode this data first, but this data has already been geolocated for you. 

First we need to get a basemap. For this example we'll use the `map_data()` function which turns data from the `maps` package into a data frame that is suitable for plotting with ggplot. 

(@) Look at the documentation for `map_data()`. Which geographies does this package provide access to?

> The map_data() function has access to the geographies of France, Italy, and The United States. 

Lets load the base map data for the US. 
```{r}
usa <- map_data("state")
```

(@) `map_data()` generates a data frame. Take a look at this data frame, what types of data are included? 

> The type of data that's included is the longitude and latitude, the region, as well as subregion.


We can now pass this data to ggplot to create a simple basemap. When we wanted to create a bar plot using `ggplot()` we called `geom_bar`. When we wanted to create a line chart we used `geom_point()` and `geom_line()`. The sample principle applies here and `ggplot()` provides a geom for maps.
```{r}
ggplot() + 
  geom_map( data = usa, map = usa, aes(long, lat, map_id=region))
```

Now we have a basemap! But what if we want to layer data onto it. Lets add all of the locations in `gayguides` from 1965. First we need to set up our data: 
```{r}
data(gayguides)
gayguides <- gayguides %>% filter(Year == 1965)
```

And then we can use the same mapping code from above but this time we're going to add an additional geom -- `geom_point()` which will point to each of our locations from 1965. 
```{r}
ggplot() + 
  geom_map(data = usa, map = usa, aes(long, lat, map_id=region), fill = "lightgray", color = "black") +
  geom_point(data = gayguides, mapping = aes(x = lon, y = lat), color = "red")
```

(@) This map looks slightly funny, but that is because the data includes entries outside of the contiguous United States. Try filtering out those entries and mapping this again. Can you change the color or size of the points? Can you add a title?
```{r}
(filter) <- gayguides %>%
  filter("year = 1965")
ggplot() + 
  geom_map(data = usa, map = usa, aes(long, lat, map_id = region), fill = "lightgray", color = "blue") +
  geom_point(data = (filter(gayguides)), mapping = aes(x = lon, y = lat), color = "blue", size = 6) +
  labs(title = "1965 Map of Gay Guides Data")
```

(@) Can you map just locations in South Carolina (on a basemap of SC)? 
```{r}
data(gayguides)
library(ggplot2)
gayguides <- gayguides %>%
  filter("state" == "South Carolina")

south_carolina_map <- map_data("state") %>%

  ggplot() + 
  geom_point(data = gayguides, mapping = aes(x = lon, y = lat), color = "blue") + 
  geom_point(data = gayguides, 
             mapping = aes(x = lon, y = lat), color = "blue", size = 6) + 
  labs(title = "Locations in South Carolina (1965)") + 
  theme_classic() 
```
It produced the Basemap, but I'm not too sure why it's not working now. 

(@) Create a map that uses your geocoded data from the Boston Women Voters dataset. 
```{r}
data(BostonWomenVoters)
BostonWomenVoters <- BostonWomenVoters %>%
  mutate(combined_address = paste(Street.Number.on.April.1, 
                                  Street.of.Residence.on.April.1, 
                                  Ward, 
                                  State.or.Province.of.Birth, sep = ", "))

BostonWomenVoters.coordinates <- BostonWomenVoters %>%
  slice(1:20) %>%  
  mutate(combined_address = as.character(combined_address)) %>% 
  geocode(address = combined_address, method = "osm", lat = latitude, long = longitude)
head(BostonWomenVoters.coordinates)

ggplot() +
  borders("state", regions = "massachusetts", fill = "lightgray", color = "blue") + 
  geom_point(data = BostonWomenVoters.coordinates, 
             aes(x = longitude, y = latitude), 
             color = "blue", size = 6) +  
  labs(title = "Boston Women Voters Dataset Geocoded Map",
       x = "Longitude", y = "Latitude") +
  theme_classic()  
```

Lets return to the recreational data for a minute.

```{r}
#| eval: false
head(rec.data.coordinates)
```
One interesting way to visualize this map might be to plot each location as a point on the map 
but to use the total_expenditures values to determine the size of the points. 

We can do that by making a small adjustment to the map we made previously.
 First lets recreate a basic map of all these locations using `ggplot()`
```{r}
ggplot() + 
  geom_map(data = rec.data, map = rec.data, aes(long, lat, map_id=region), fill = "lightgray", color = "black") +
  geom_point(data = rec.data.coordinates, mapping = aes(x=longitude, y=latitude))
```

```{r}
ggplot() + 
  geom_map( data = usa, map = usa, aes(long, lat, map_id=region), fill="white", color="gray") +
  geom_point(data = rec.data.coordinates, mapping = aes(x=longitude, y=latitude, size=total_expenditures))
```

---

```{r}
library(readr) #you may have to install it using `install.packages()`. 
library(sf)
library(ipumsr) #you may need to install this. If you are on a mac, it may give you warnings. Try loading it to verify installation worked. 
library(tidyverse)

#NHGIS data is stored in zip files. R has functions for dealing with these but we still need to download the file to our server. Here we're going to write a function that will create a new directory, download the data, and rename it. 
dir.create("data/", showWarnings = FALSE)
get_data <- function(x) {
  download.file("https://github.com/regan008/DigitalMethodsData/blob/main/raw/nhgis0005_shape_simplified.zip?raw=true", "data/nhgis_simplified_shape.zip")
  download.file("https://github.com/regan008/DigitalMethodsData/blob/main/raw/nhgis0005_csv.zip?raw=true", "data/nhgis_data.zip")
}

get_data()

# Change these filepaths to the filepaths of your downloaded extract
nhgis_csv_file <- "data/nhgis_data.zip"
nhgis_shp_file <- "data/nhgis_simplified_shape.zip"

#load the shape file and then the data file into read_nhgis_sf
nhgis_shp <- read_ipums_sf(
  shape_file = nhgis_shp_file
)
nhgis_data <- read_nhgis(nhgis_csv_file)

#Use the ipums join file to join both the data and shape file together.
nhgis <- ipums_shape_full_join(nhgis_data, nhgis_shp, by = "GISJOIN")

#filter nhgis so that the map focuses on the 48 contiguous states. 
nhgis <- nhgis %>% filter(STATE != "Alaska Territory" & STATENAM != "Hawaii Territory")

#plot 
ggplot(data = nhgis, aes(fill = AZF001)) +
  geom_sf() 

```
(@) In the code above, why filter out Hawaii and Alaska? Try commenting out that line and rerunning the code. 
What happens? Why might we want to do this? Why might we not want to do this? 
How does it shape the interpretation?

> Alaska and Hawaii, in terms of the battles of statehood, not until 1959 were they added. Alaska became 
the 49th state, and Hawaii became the 50th. Most of the data compiled for the NHGIS is from 1900, 59 years
before their additions. The is historical signifcance with not including it because of when these states 
achieved statehood. But, the reason why we may not want to do this because it could possibly skew the information
that these states achieved, but were not being recongized until 1959. This shapes the interpretation heavily,
but emphasizing not only their statehood, but what the United States considered "American", so the
interpretation could stretch really far, especially in terms of looking at change over time within the 
founding and establishing of certain states. 

This is a great start. But using AZF001 (Native born males) as the fill does not create a useful visualization.
It doesn't give us a sense of the proportion of that data. 
There are multiple problems with the map as it is, but one is that the color scale makes 
this incredibly hard to read. We can fix that by
using a scale to break the values of AZF001 into bins and assign each a color. 
R has a function for this. It comes from the scales pacakge which you may need to install.

```{r}
library(scales)
ggplot(data = nhgis, aes(fill = AZF001)) +
  geom_sf() + scale_fill_distiller(name="Native Born Males", palette = "Spectral" , breaks = pretty_breaks(n = 10))
```

This is now much more readable but the numbers represented are simply the raw population count. 
That may be fine depending on your question but what would be much better, 
is if we knew what percentage of the total population foreign born males represented. 
To get that we have to calculate it.
The next few questions will walk build on the code above and walk you through doing this.

(@) First, create a variable called total_male_pop, with the total foreign and native born male population by summing the variables AZF001 and AZF003. 
```{r}
nhgis_data <- nhgis_data %>%
  mutate(total_male_pop = AZF001 + AZF003)
head(nhgis_data)
```

(@) Now, use the total_male_pop variable and create a variable for the percentage of foreign born males.
```{r}
nhgis_data <- nhgis_data %>%
  mutate(percent_of_males_born_foreign = (AZF001 / total_male_pop * 100))
head(nhgis_data)
```

(@) Now map your result. You'll want to replicate the code from the example above, 
but this time add another layer to the plot - a scale. 
Here we'll use this scale `scale_fill_continuous("", labels = scales::percent)`

Before you write that code, look up the documentation for the above code (and look at the examples). 
What does it do? 

> It essentially customized the color scale, and fills the aesthestics in ggplot2(). 
The first argument "", represents the title of the legend and that it will be removed. 
The 'labels' argument specifies how the labels on the legend or color bar should be formatted.
The 'scales::percent' function is from the scales package that we've previously used
and automatically formats numeric values as percentages for easier interpretaion. 

Now create the map: 
```{r}
nhgis_data <- nhgis_data %>%
nhgis_data <- map_data("state") 
nhgis_data <- map_data %>%
  left_join(nhgis_data, by = c("state"))
  map_data_combined <- full_join(map_data, nhgis_data, by = c("region" = "state"))


ggplot(data = nhgis_data) aes(x = long, y = lat, group = group, fill = percent_of_males_born_foreign) + 
  scale_fill_continuous("", labels = scales::percent) + 
  labs(title = "Percentage of Foreign-Born Males by State", fill = "Foreign-Born Males (%)") + 
  theme_classic()
```

### Leaflet

In recent years Leaflet has become the most popular open source Javascript library for mapping. 
In comparison to `ggplot()` the advantage of leaflet is its interactivity. 
It allows you to zoom in, have pop ups, etc. While `ggplot()` is a powerful tool for static maps 
and would be useful for a book or journal article, leaflet would make a useful addition to an 
online digital component.

Like `ggplot()` it works by layering information on top of a basemap. 
You begin by loading the library and invoking leaflet. 
```{r}
library(leaflet)
my.map <- leaflet()
my.map
```
Now that we've got a leaflet object created, we can add layers to it starting with a basemap. 
```{r}
my.map %>% addTiles()
```
Leaflet refers to tiles - these are sort of like base maps. Next we need to add coordinates. 
In this example, lets use the coordinates for Dr. Regan's office. 
```{r}
my.map %>% addTiles() %>% addMarkers(lng=-82.836856, lat=34.678286, popup = "Hardin 004")
```

We could also do this with a data frame. 
Notice that in this example, we use the leaflet function and call the data inside rather than passing the function coordinates manually.
We then use the paste function to build out text for a pop up.
```{r}
leaflet(data=rec.data.coordinates) %>% addTiles() %>% addMarkers(~longitude, ~latitude, popup = paste("The total expenditures in ", rec.data.coordinates$city, ", ", rec.data.coordinates$state, " were ",  rec.data.coordinates$total_expenditures, sep=""))
```


(@) Use leaflet to map a dataset of your choice: 
```{r}
statepopulations <- data.frame(
  state = state.name,  
  city = state.name,  
  total_population = state.x77[, "Population"],  
  latitude = state.center$y,  # Had to change this because the dataset does not have "latitude" column until
                              # one is created
  longitude = state.center$x  # Had to change this because the dataset does not have "longitude" column until 
                              # one is created
)
leaflet(data = statepopulations) %>%
  addTiles() %>%  
  addMarkers(
    ~longitude, ~latitude, 
    popup = ~paste(
      "The total population of ", city, " is ", total_population, ".", sep = ""
    )
  )
```
Written vertically in the question before is kind of confusing for me, so I decided to build it horizontally.

(@) Explain what choices you made in building this map? Why might you use leaflet over ggplot? 
When would ggplot be more desirable? 

> I wanted to create a map for a dataset that did not have the latitude or longitude columns. Building from
what we've learned earlier in the semester, creating columns as such especially for a populations dataset
is critical in terms of analysis. Furthermore, I wanted to see how these populations would look in terms
of plotted on the Leaflet, which I thought was pretty neat. Using leaflet over ggplot can definitely add
the dimensions necessary for directions or a simple interactive map for teaching. In terms of ggplot, 
it would be more desriable in a situation where scale and accuracy is the goal, and in terms of a ggplot 
map being more distinct in terms of intepretation and analysis. 


### Exercises
I attach my spreadsheets with various data points related to national parks in the UK, Europe, the United States, Canada, New Zealand and South Africa. 
(I have omitted Australia because its system of national parks combines national and state parks and is 
therefore very tricky to amass data on.) 
The data on region/location within the country is only there for my purposes.

My basic intent is to show how British parks differ from and are similar to parks in other places.
Specific ideas on the type of data I would like to visualize:

Britain vs continental Europe
 
A comparison of British parks to European ones will I think show that they slant older, and 
that there have not been as many created in recent decades.
I also think that British parks will generally be larger than European ones, and likely closer to urban areas.
I also compiled the total sq km that parks occupy in each country so that this can be compared
I compiled some more specific data on France and Germany as the two most relevant bases for comparison. For France and Germany, 
I looked at the closest cities of over 1 million. 
For France I was able to get the population of people who live in each park, so that can be compared as well.
I am eager for your students to suggest other points of comparison, in addition to the best ways to visualize the points above.
 
Britain vs the US
 
I think the data will show that American parks are older, larger and further from urban areas.
See #5 above.
 

 

```{r}
parks <- read.csv("https://raw.githubusercontent.com/regan008/DigitalMethodsData/main/raw/parks-geocoded.csv")

```

